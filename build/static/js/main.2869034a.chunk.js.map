{"version":3,"sources":["api/imageApi.jsx","Scenes/Upload/Upload.jsx","Scenes/Display/FilteredImageView.jsx","Scenes/Display/Display.jsx","App.js","serviceWorker.js","index.js"],"names":["axios","require","imageApiUrl","concat","postImages","data","headers","undefined","Headers","append","getAuthHeaders","post","then","resp","catch","err","console","log","linkStyle","textDecoration","color","Upload","_React$useState","React","useState","_React$useState2","Object","slicedToArray","loading","setLoading","_React$useState3","_React$useState4","uploadSuccess","setUploadSuccess","_React$useState5","_React$useState6","errorMsg","setErrorMsg","_React$useState7","_React$useState8","uploadCount","setUploadCount","_React$useState9","_React$useState10","uploadCountTotal","setUploadCountTotal","react_default","a","createElement","Fragment","style","padding","Typography","variant","method","onSubmit","e","preventDefault","files","document","querySelector","totalCount","length","setTimeout","fileList","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","file","value","toConsumableArray","return","uploadImageRecc","count","pop","FormData","res","type","name","multiple","height","react_simple_spinner_default","size","message","Check_default","Button","react_router_dom","to","className","memo","props","imageUrl","href","id","src","alt","Slideshow","images","setImages","useEffect","get","map","idx","FilteredImageView","key","App","react_router","exact","path","component","Display","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2869034a.chunk.js","sourcesContent":["const axios = require(\"axios\");\n\nconst baseUrl = \"https://ka-uploaddemo.azurewebsites.net\";\n// const baseUrl = 'https://localhost:44350';\n\nconst imageApiUrl = `${baseUrl}/api/image`;\n\nfunction getAuthHeaders(headers) {\n  if (headers === undefined) {\n    headers = new Headers();\n  }\n\n  headers.append(\"Content-Type\", \"multipart/form-data; boundary\");\n\n  // headers.append('Content-Type', 'application/json');\n  // headers.append('Authorization', `Bearer ${sessionInfo.token}`);\n\n  return headers;\n}\n\nexport function getImages() {\n  return axios.get(imageApiUrl).then(resp => {\n    // console.log(resp.data);\n    return resp.data;\n  });\n}\n\nexport function getImage(number) {\n  return axios.get(`${imageApiUrl}/GetImage?number=${number}`).then(resp => {\n    // console.log(resp.data);\n    return resp.data;\n  });\n}\n\nexport function postImages(data) {\n  const headers = getAuthHeaders();\n\n  return axios\n    .post(imageApiUrl, data, headers)\n    .then(resp => {\n      // console.log(resp.data);\n      return resp.data;\n    })\n    .catch(err => console.log(err));\n}\n\nexport function uploadImagesXhr(data) {\n  return new Promise(function(resolve, reject) {\n    let xhr = new XMLHttpRequest();\n\n    xhr.open(\"POST\", imageApiUrl);\n\n    xhr.onreadystatechange = function() {\n      console.log(xhr.status, xhr.readyState);\n      if (xhr.readyState === 4 && xhr.status === 200) {\n        let result = xhr.responseText;\n        if (result === \"OK\") {\n          resolve(true);\n        }\n      } else if (xhr.readyState === 4 && xhr.status !== 200) {\n        reject(\"error\");\n      }\n    };\n\n    xhr.upload.addEventListener(\"progress\", pEvent => {\n      let progress = pEvent.loaded / pEvent.total;\n      console.log(progress);\n    });\n\n    xhr.send(data);\n  });\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport Button from \"@material-ui/core/Button\";\n\nimport Spinner from \"reactjs-simple-spinner\";\nimport { postImages } from \"../../api/imageApi\";\n\nimport \"./style.css\";\n\nconst linkStyle = {\n  textDecoration: \"none\",\n  color: \"black\"\n  // border: \"1px solid #ddd\"\n};\n\nexport default function Upload() {\n  const [loading, setLoading] = React.useState(false);\n  const [uploadSuccess, setUploadSuccess] = React.useState(0);\n  const [errorMsg, setErrorMsg] = React.useState(\"\");\n  const [uploadCount, setUploadCount] = React.useState(0);\n  const [uploadCountTotal, setUploadCountTotal] = React.useState(0);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setLoading(true);\n    setUploadSuccess(0);\n    setErrorMsg(\"\");\n\n    const files = document.querySelector(\"[type=file]\").files;\n\n    let totalCount = files.length;\n    if (totalCount === 0) {\n      setErrorMsg(\n        \"Ingen bilder lagt til - legg til og trykk 'last opp bilder'\"\n      );\n      setTimeout(() => {\n        setErrorMsg(\"\");\n      }, 6000);\n      setLoading(false);\n      return;\n    }\n    console.log(\"starting\", totalCount);\n    setUploadCountTotal(totalCount);\n\n    // const uploadImages = files => {\n    //   const data = new FormData();\n    //   for (const file of files) {\n    //     // console.log(\"file1\", file);\n    //     data.append(\"files\", file);\n    //     // console.log(\"data1\", data);\n    //     // return;\n    //   }\n\n    //   postImages(data).then(res => {\n    //     console.log(\"images uploaded\");\n    //     document.querySelector(\"[type=file]\").value = \"\";\n    //     setLoading(false);\n    //     setUploadSuccess(totalCount);\n    //     setTimeout(() => {\n    //       setUploadSuccess(0);\n    //     }, 10000);\n    //   });\n    // };\n\n    const uploadImageRecc = (files, count, totalCount) => {\n      if (files.length === 0) return;\n\n      var file = files.pop();\n      count++;\n\n      const data = new FormData();\n      // console.log(\"file\", file);\n      data.append(\"files\", file);\n      // console.log(\"data\", data);\n      // return;\n\n      postImages(data).then(res => {\n        console.log(\"image uploaded\");\n\n        setUploadCount(count);\n\n        if (count === totalCount) {\n          document.querySelector(\"[type=file]\").value = \"\";\n          setLoading(false);\n          setUploadSuccess(totalCount);\n          setUploadCount(0);\n\n          setTimeout(() => {\n            setUploadSuccess(0);\n          }, 10000);\n        } else {\n          uploadImageRecc(files, count, totalCount);\n        }\n      });\n    };\n\n    // uploadImages(files);\n\n    var fileList = [];\n    for (const file of files) fileList = [...fileList, file];\n\n    var count = 0;\n    uploadImageRecc(fileList, count, totalCount);\n  };\n\n  return (\n    <>\n      <div style={{ padding: \"20px 0 0 0\" }}>\n        <Typography variant=\"h4\">Slideshow bilder</Typography>\n      </div>\n\n      <div style={{ padding: \"20px 0\" }}>\n        <Typography>\n          Her kan det lastes opp bilder som vil vises under bryllupsfesten til\n        </Typography>\n        <Typography>Kine og Andreas.</Typography>\n      </div>\n\n      <div\n        style={{\n          padding: \"10px 0px 15px 0px\"\n        }}\n      >\n        <form method=\"post\" onSubmit={handleSubmit}>\n          <input type=\"file\" name=\"files[]\" multiple />\n          <input type=\"submit\" value=\"Last opp bilder\" name=\"submit\" />\n        </form>\n      </div>\n\n      {/* <Spinner size=\"medium\" message=\"Uploading...\" /> */}\n      <div style={{ height: \"60px\" }}>\n        {loading && !uploadSuccess && (\n          <Spinner\n            size=\"medium\"\n            message={`Laster opp... ${uploadCount} av ${uploadCountTotal}`}\n          />\n        )}\n        {!loading && uploadSuccess === 1 && (\n          <Typography>\n            Image uploaded <CheckIcon style={{ color: \"green\" }} />\n          </Typography>\n        )}\n        {!loading && uploadSuccess > 1 && (\n          <Typography>\n            Images uploaded <CheckIcon style={{ color: \"green\" }} />\n          </Typography>\n        )}\n        <Typography>{errorMsg}</Typography>\n      </div>\n\n      <div style={{ padding: \"20px 0\" }}>\n        <Button variant=\"outlined\" color=\"primary\">\n          <Link style={linkStyle} to=\"/bilder\">\n            Se alle bilder\n          </Link>\n        </Button>\n      </div>\n\n      <div className=\"image-wrapper\">\n        <div className=\"image\" />\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nimport \"./display.css\";\n\nexport default React.memo(function ImageView(props) {\n  return (\n    <div className=\"display-item\">\n      {props.imageUrl && (\n        <>\n          <a href={props.imageUrl}>\n            <img\n              id=\"myImg\"\n              src={props.imageUrl}\n              alt=\"img_from_blob\"\n              className=\"filteredimage\"\n            />\n          </a>\n        </>\n      )}\n    </div>\n  );\n});\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport \"./display.css\";\n\nimport { getImages } from \"../../api/imageApi\";\nimport ImageView from \"./FilteredImageView\";\n\nconst linkStyle = {\n  textDecoration: \"none\"\n};\n\nexport default function Slideshow() {\n  const [images, setImages] = React.useState([]);\n\n  React.useEffect(() => {\n    getImages().then(res => {\n      setImages(res);\n    });\n  }, []);\n\n  return (\n    <>\n      <div style={{ padding: \"20px 0 0 0\" }}>\n        <Typography variant=\"h4\">Slideshow bilder</Typography>\n      </div>\n\n      <div className=\"logo-wrapper\">\n        <div className=\"logo\" />\n      </div>\n\n      <div style={{ padding: \"0 0 10px 0\" }}>\n        <Button variant=\"outlined\" color=\"primary\">\n          <Link style={linkStyle} to=\"/\">\n            Gå tilbake\n          </Link>\n        </Button>\n      </div>\n\n      {images && (\n        <div className=\"display-container\">\n          {images.map((imageUrl, idx) => (\n            <ImageView key={idx} imageUrl={imageUrl} />\n          ))}\n        </div>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nimport Upload from \"./Scenes/Upload/Upload.jsx\";\nimport Display from \"./Scenes/Display/Display.jsx\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <main>\n          <Route exact path=\"/\" component={Upload} />\n          <Route path=\"/bilder\" component={Display} />\n        </main>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}